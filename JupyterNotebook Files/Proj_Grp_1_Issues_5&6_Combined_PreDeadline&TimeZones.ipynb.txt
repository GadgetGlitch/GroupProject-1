{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9ceabe6e",
   "metadata": {},
   "source": [
    "# 1. Install necessary packages and libraries\n",
    "Run the following four installs only once"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "650e452b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: geopy in c:\\users\\annak\\anaconda3\\lib\\site-packages (2.4.1)\n",
      "Requirement already satisfied: geographiclib<3,>=1.52 in c:\\users\\annak\\anaconda3\\lib\\site-packages (from geopy) (2.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install geopy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3268faa8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tzwhere in c:\\users\\annak\\anaconda3\\lib\\site-packages (3.0.3)\n",
      "Requirement already satisfied: shapely in c:\\users\\annak\\anaconda3\\lib\\site-packages (from tzwhere) (2.0.2)\n",
      "Requirement already satisfied: numpy>=1.14 in c:\\users\\annak\\anaconda3\\lib\\site-packages (from shapely->tzwhere) (1.24.3)\n"
     ]
    }
   ],
   "source": [
    "!pip install tzwhere"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "66b18b36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: timezonefinder in c:\\users\\annak\\anaconda3\\lib\\site-packages (6.4.0)\n",
      "Requirement already satisfied: cffi<2,>=1.15.1 in c:\\users\\annak\\anaconda3\\lib\\site-packages (from timezonefinder) (1.15.1)\n",
      "Requirement already satisfied: h3<4,>=3.7.6 in c:\\users\\annak\\anaconda3\\lib\\site-packages (from timezonefinder) (3.7.6)\n",
      "Requirement already satisfied: numpy<2,>=1.18 in c:\\users\\annak\\anaconda3\\lib\\site-packages (from timezonefinder) (1.24.3)\n",
      "Requirement already satisfied: setuptools>=65.5 in c:\\users\\annak\\anaconda3\\lib\\site-packages (from timezonefinder) (68.0.0)\n",
      "Requirement already satisfied: pycparser in c:\\users\\annak\\anaconda3\\lib\\site-packages (from cffi<2,>=1.15.1->timezonefinder) (2.21)\n"
     ]
    }
   ],
   "source": [
    "!pip install timezonefinder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abfc5938",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pytz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "621bbada",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import datetime\n",
    "import pytz\n",
    "import plotly.graph_objects as go\n",
    "import pandas as pd\n",
    "import ipywidgets as widgets\n",
    "import datetime\n",
    "from geopy.geocoders import Nominatim\n",
    "from timezonefinder import TimezoneFinder\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5298c84",
   "metadata": {},
   "source": [
    "# 2. Define Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "099259e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize Nominatim and TimezoneFinder\n",
    "geolocator = Nominatim(user_agent=\"geocity\")\n",
    "tf = TimezoneFinder()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84fdecb2",
   "metadata": {},
   "source": [
    "# 3. Make the Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6b617585",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_timezone_from_city(city):\n",
    "    location = geolocator.geocode(city)\n",
    "    if location:\n",
    "        timezone_str = tf.timezone_at(lat=location.latitude, lng=location.longitude)\n",
    "        return timezone_str\n",
    "    return None\n",
    "\n",
    "# Function to standardize city names\n",
    "def standardize_city_name(city):\n",
    "    city = city.lower()\n",
    "    if city in [\"saranda\", \"sarande\"]:\n",
    "        return \"Sarandë, Albania\"\n",
    "    return city\n",
    "\n",
    "def get_predeadline(deadline, buffer_days=1):\n",
    "    \"\"\"Subtract buffer days from deadline date to get the pre-deadline date.\"\"\"\n",
    "    return deadline - datetime.timedelta(days=buffer_days)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98f216fd",
   "metadata": {},
   "source": [
    "# 4. Load CSV and convert DATE column to datetimes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "41322585",
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path = r\"C:\\Users\\annak\\CAS-502 Computation\\GroupProject-1\\GP1 Dataset_ Assignments.csv\"\n",
    "df = pd.read_csv(file_path, encoding='ISO-8859-1')\n",
    "df['DATE'] = pd.to_datetime(df['DATE'], utc=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f90a8b5a",
   "metadata": {},
   "source": [
    "# 5. Ask the user for their city"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a0f22d60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the city you are in: saranda\n"
     ]
    }
   ],
   "source": [
    "user_city = standardize_city_name(input(\"Enter the city you are in: \"))\n",
    "user_timezone = get_timezone_from_city(user_city)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9985780c",
   "metadata": {},
   "source": [
    "# 6. Convert due dates to the user's local timezone and calculate for pre-deadline dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7997af35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ITEM#  COURSE         ASSIGNMENT NAME  \\\n",
      "0      1  CAS502  A1: P1: Read Articles    \n",
      "1      2  CAS502  A1: P1: Find Statement   \n",
      "2      3  CAS502   A1: P2: Watch a Video   \n",
      "3      4  CAS502    WK2: Automated Ideas   \n",
      "4      5  CAS502    WK2: Team Name Title   \n",
      "\n",
      "                                     DESCRIPTION                      DATE  \\\n",
      "0                      Statement that stood out  2024-01-13 00:00:00+00:00   \n",
      "1         Write why interesting",
      "answer questions 2024-01-13 00:00:00+00:00   \n",
      "2  Two recs and what could have done differently 2024-01-13 00:00:00+00:00   \n",
      "3                    Brainstorm what to Automate 2024-01-15 00:00:00+00:00   \n",
      "4                                Group Project 1 2024-01-15 00:00:00+00:00   \n",
      "\n",
      "             LOCAL_DUE_DATE               PREDEADLINE DONE  \n",
      "0 2024-01-13 01:00:00+01:00 2024-01-12 01:00:00+01:00    Y  \n",
      "1 2024-01-13 01:00:00+01:00 2024-01-12 01:00:00+01:00    Y  \n",
      "2 2024-01-13 01:00:00+01:00 2024-01-12 01:00:00+01:00    Y  \n",
      "3 2024-01-15 01:00:00+01:00 2024-01-14 01:00:00+01:00    Y  \n",
      "4 2024-01-15 01:00:00+01:00 2024-01-14 01:00:00+01:00    Y  \n"
     ]
    }
   ],
   "source": [
    "if user_timezone:\n",
    "    user_tz = pytz.timezone(user_timezone)\n",
    "    df['LOCAL_DUE_DATE'] = df['DATE'].apply(lambda x: x.astimezone(user_tz))\n",
    "    df['PREDEADLINE'] = df['LOCAL_DUE_DATE'].apply(lambda x: get_predeadline(x))\n",
    "else:\n",
    "    print(\"City not found. Using UTC as default.\")\n",
    "    df['LOCAL_DUE_DATE'] = df['DATE']\n",
    "    df['PREDEADLINE'] = df['LOCAL_DUE_DATE'].apply(lambda x: get_predeadline(x, utc=True))\n",
    "\n",
    "# Define the order of the columns, including the new PREDEADLINE column\n",
    "column_order = ['ITEM#', 'COURSE', 'ASSIGNMENT NAME', 'DESCRIPTION', 'DATE', 'LOCAL_DUE_DATE', 'PREDEADLINE', 'DONE']\n",
    "\n",
    "# Reorder the DataFrame according to the defined column order\n",
    "df = df[column_order]\n",
    "\n",
    "# Print the DataFrame to check the results\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6afaac03",
   "metadata": {},
   "source": [
    "# 7. Save the modified DataFrame to a new file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9fb4e261",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File saved as: C:\\Users\\annak\\CAS-502 Computation\\GroupProject-1\\GP1 Dataset_ Assignments_PreDeadline.csv\n"
     ]
    }
   ],
   "source": [
    "new_file_path = file_path.rsplit('\\\\', 1)[0] + '\\\\GP1 Dataset_ Assignments_PreDeadline.csv'\n",
    "df.to_csv(new_file_path, index=False)\n",
    "print(f\"File saved as: {new_file_path}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
