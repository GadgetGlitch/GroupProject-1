{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0c02e15b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.graph_objects as go\n",
    "import pandas as pd\n",
    "import ipywidgets as widgets\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f7869e26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ITEM#       DATE  WK#  COURSE         ASSIGNMENT NAME  \\\n",
      "0      1  1/13/2024    1  CAS502  A1: P1: Read Articles    \n",
      "1      2  1/13/2024    1  CAS502  A1: P1: Find Statement   \n",
      "2      3  1/13/2024    1  CAS502   A1: P2: Watch a Video   \n",
      "3      4  1/15/2024    2  CAS502    WK2: Automated Ideas   \n",
      "4      5  1/15/2024    2  CAS502    WK2: Team Name Title   \n",
      "\n",
      "                                     DESCRIPTION DONE  \n",
      "0                      Statement that stood out     Y  \n",
      "1         Write why interesting",
      "answer questions    Y  \n",
      "2  Two recs and what could have done differently    Y  \n",
      "3                    Brainstorm what to Automate    Y  \n",
      "4                                Group Project 1    Y  \n"
     ]
    }
   ],
   "source": [
    "file_path = r\"C:\\Users\\annak\\CAS-502 Computation\\GroupProject-1\\GP1 Dataset_ Assignments.csv\"\n",
    "df = pd.read_csv(file_path, encoding='ISO-8859-1')  \n",
    "\n",
    "print(df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a293ea63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2023-02-14\n"
     ]
    }
   ],
   "source": [
    "# Imported datetime to handle dates\n",
    "import datetime\n",
    "\n",
    "# Function to calculate pre-deadline date\n",
    "def get_predeadline(deadline, buffer_days=1):\n",
    "    \n",
    "    # Subtract buffer days from deadline date \n",
    "    predeadline = deadline - datetime.timedelta(days=buffer_days)  \n",
    "    \n",
    "    # Return predeadline date \n",
    "    return predeadline\n",
    "\n",
    "# Example usage    \n",
    "deadline = datetime.date(2023, 2, 15)  \n",
    "predeadline = get_predeadline(deadline, buffer_days=1) \n",
    "\n",
    "print(predeadline) # 2023-02-13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c7f43341",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ITEM#       DATE PREDEADLINE  WK#  COURSE         ASSIGNMENT NAME  \\\n",
      "0      1 2024-01-13  2024-01-12    1  CAS502  A1: P1: Read Articles    \n",
      "1      2 2024-01-13  2024-01-12    1  CAS502  A1: P1: Find Statement   \n",
      "2      3 2024-01-13  2024-01-12    1  CAS502   A1: P2: Watch a Video   \n",
      "3      4 2024-01-15  2024-01-14    2  CAS502    WK2: Automated Ideas   \n",
      "4      5 2024-01-15  2024-01-14    2  CAS502    WK2: Team Name Title   \n",
      "\n",
      "                                     DESCRIPTION DONE  \n",
      "0                      Statement that stood out     Y  \n",
      "1         Write why interesting",
      "answer questions    Y  \n",
      "2  Two recs and what could have done differently    Y  \n",
      "3                    Brainstorm what to Automate    Y  \n",
      "4                                Group Project 1    Y  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import datetime\n",
    "\n",
    "# Load the CSV file\n",
    "file_path = r\"C:\\Users\\annak\\CAS-502 Computation\\GroupProject-1\\GP1 Dataset_ Assignments.csv\"\n",
    "df = pd.read_csv(file_path, encoding='ISO-8859-1')\n",
    "\n",
    "# Convert the 'DATE' column to datetime objects\n",
    "df['DATE'] = pd.to_datetime(df['DATE'], format='%m/%d/%Y')\n",
    "\n",
    "# Function to calculate pre-deadline date\n",
    "def get_predeadline(deadline, buffer_days=1):\n",
    "    predeadline = deadline - datetime.timedelta(days=buffer_days)\n",
    "    return predeadline\n",
    "\n",
    "# Calculate predeadline for each date\n",
    "df['PREDEADLINE'] = df['DATE'].apply(lambda x: get_predeadline(x, buffer_days=1))\n",
    "\n",
    "# Rearrange columns to put PREDEADLINE between DATE and WK#\n",
    "column_order = ['ITEM#', 'DATE', 'PREDEADLINE', 'WK#', 'COURSE', 'ASSIGNMENT NAME', 'DESCRIPTION', 'DONE']\n",
    "df = df[column_order]\n",
    "\n",
    "# Print the new table headers\n",
    "print(df.head())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "29564998",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File saved as: C:\\Users\\annak\\CAS-502 Computation\\GroupProject-1\\GP1 Dataset_ Assignments_PreDeadline.csv\n"
     ]
    }
   ],
   "source": [
    "# Original file path\n",
    "original_file_path = r\"C:\\Users\\annak\\CAS-502 Computation\\GroupProject-1\\GP1 Dataset_ Assignments.csv\"\n",
    "\n",
    "# Constructing the new file path\n",
    "new_file_name = \"GP1 Dataset_ Assignments_PreDeadline.csv\"\n",
    "new_file_path = original_file_path.rsplit('\\\\', 1)[0] + '\\\\' + new_file_name\n",
    "\n",
    "# Save the modified DataFrame to the new file\n",
    "df.to_csv(new_file_path, index=False)\n",
    "\n",
    "print(f\"File saved as: {new_file_path}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "340579a1",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'deadline_date' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[43], line 4\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m#from https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Layout.html\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \n\u001b[0;32m      3\u001b[0m \u001b[38;5;66;03m#Call predeadline function\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m re_date \u001b[38;5;241m=\u001b[39m get_predeadline(deadline_date, buffer_days\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m)\n\u001b[0;32m      6\u001b[0m df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mGP1 Dataset_Assignment.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      7\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mColors\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnil\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'deadline_date' is not defined"
     ]
    }
   ],
   "source": [
    "#from https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Layout.html\n",
    "\n",
    "#Call predeadline function\n",
    "re_date = get_predeadline(deadline_date, buffer_days=2)\n",
    "\n",
    "df = pd.read_csv('GP1 Dataset_Assignment.csv')\n",
    "df['Colors'] = 'nil'\n",
    "for index,row in df.iterrows():\n",
    "    if row['Status'] == 'Open':\n",
    "        df.at[index,'Colors'] = 'black'\n",
    "    else:\n",
    "        df.at[index,'Colors'] = 'red'\n",
    "\n",
    "a_list = list(df['ASSIGNMENT NAME'])\n",
    "a_list.insert(0,'None')\n",
    "\n",
    "button = widgets.Button(description=\"Mark As Complete\")\n",
    "text = widgets.Dropdown(\n",
    "    options=a_list,\n",
    "    value=a_list[0],\n",
    "    description='Assignment Name:',\n",
    "    disabled=False,\n",
    ")\n",
    "\n",
    "output = widgets.Output()\n",
    "\n",
    "\n",
    "#@output.capture()\n",
    "def on_button_clicked(b):\n",
    "    with output:\n",
    "        output.clear_output()\n",
    "        a_name = text.value\n",
    "        \n",
    "        if a_name != 'None':\n",
    "            \n",
    "       \n",
    "            index_req = df.index[df['ASSIGNMENT NAME'] == a_name].to_list()\n",
    "        \n",
    "            df.at[index_req[0],'Status'] = 'Closed'\n",
    "            df.at[index_req[0],'Colors'] = 'red'\n",
    "            df.sort_values(by=['Status', 'DATE'], inplace=True, ascending=[False,True])\n",
    "            a_list = list(df['ASSIGNMENT NAME'])\n",
    "        \n",
    "        df.to_csv('testdata.csv',columns=['DATE','WEEK NUMBER','COURSE','ASSIGNMENT NAME','DESCRIPTION','Status'])\n",
    "        fig = go.Figure(data=[go.Table(header=dict(\n",
    "        values=[\"Date\", \"Week Number\",\"Course\",\"Assignment Name\",\"Description\",\"Status\"],\n",
    "        line_color='white', fill_color='white',\n",
    "        align='center', font=dict(color='black', size=12)\n",
    "        ),\n",
    "        cells=dict(\n",
    "        values=[df['DATE'], df['WEEK NUMBER'],df['COURSE'],df['ASSIGNMENT NAME'],df['DESCRIPTION'],df['Status']],\n",
    "        #line_color=[df.Colors], \n",
    "        #fill_color=[df.Colors],\n",
    "        align='center', font=dict(color= [df.Colors], size=11)\n",
    "         ))\n",
    "        ])\n",
    "        fig.show()\n",
    "        \n",
    "fig = go.Figure(data=[go.Table(header=dict(\n",
    "        values=[\"Date\", \"Week Number\",\"Course\",\"Assignment Name\",\"Description\",\"Status\"],\n",
    "        line_color='white', fill_color='white',\n",
    "        align='center', font=dict(color='black', size=12)\n",
    "          ),\n",
    "        cells=dict(\n",
    "        values=[df['DATE'], df['WEEK NUMBER'],df['COURSE'],df['ASSIGNMENT NAME'],df['DESCRIPTION'],df['Status']],\n",
    "        #line_color=[df.Colors], \n",
    "        #fill_color=[df.Colors],\n",
    "        align='center', font=dict(color= [df.Colors], size=11)\n",
    "          ))\n",
    "        ])\n",
    "\n",
    "\n",
    "\n",
    "button.on_click(on_button_clicked)\n",
    "list_button = widgets.HBox([text,button])\n",
    "widgets.VBox([list_button,output])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da21d49c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
